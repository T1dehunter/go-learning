#GET http://localhost:80/api/item?id=99
#Accept: application/json

###
### Simple WebSocket Request
// It is possible to send messages to server right from the Services tool window
#WEBSOCKET ws://localhost:3000/chat


### User auth request
#WEBSOCKET ws://localhost:3000/chat
#Content-Type: application/json
#
#{
#  "name": "user_auth", "payload": {"userID": 1, "userName": "Alex", "accessToken": "Test1234"}
#}

### User join to room request
WEBSOCKET ws://localhost:3000/chat
Content-Type: application-json // Used for content highlighting only

{
 "name": "user_connect", "payload": {"userID": 1, "roomID": 1, "accessToken": "Test123"}
}

###
#=== wait-for-server
{
 "name": "user_join_to_room", "payload": {"userID": 1, "roomID": 1, "roomName": "Room 1"}
}
=== wait-for-server
{
 "name": "user_leave_room", "payload": {"userID": 1, "roomID": 1, "roomName": "Room 1"}
}




### Request with client messages
#// It is possible to specify client messages in request body. Use '===' to separate messages.
#// Add '=== wait-for-server' above a message to send it after a server response is received.
#// To wait for N responses, add '=== wait-for-server' N times.
#WEBSOCKET ws://{{$exampleServer}}/ws
#Content-Type: application/json // We use it for highlighting
#
#===
#{
#  "message": "Hello, server!",
#  "repeat": 3
#}
#=== wait-for-server
#=== wait-for-server
#{
#  "message": "We send this message...",
#  "repeat": 0
#}
#===
#{
#  "message": "And this message together",
#  "repeat": 1
#}
#
#### Requests with scripts
#// Also, we can use scripts for sending messages to server and verifying messages from the server.
#WEBSOCKET ws://{{$exampleServer}}/ws
#Content-Type: application/json
#
#{
#  "message": "Beginning message"
#}
#
#> {%
#    var i = 0
#    response.body.onEachMessage((message, unsubscribe, output) => {
#        i++
#        const jsonMessage = JSON.parse(message); // We know that our sample server returns JSON
#        client.test("Server sent a JSON with 'message' property: " + i, () => {
#            client.assert(jsonMessage.message !== undefined)
#        });
#        if (jsonMessage.message.includes("finish")) {
#            unsubscribe() // remove current listener
#            return
#        }
#
#        if (i === 5) {
#            output(JSON.stringify({
#                message: "finish"
#            }));
#        } else {
#            output(JSON.stringify({
#                message: "Message from the script: " + i
#            }));
#        }
#    }, () => {
#        client.log("We stopped listening for WebSocket from the current 'onEachMessage' call!")
#    });
#%}